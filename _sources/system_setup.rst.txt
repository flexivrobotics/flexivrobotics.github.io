System Setup
===============

This chapter covers the hardware and software setup required for Flexiv RDK. 
A brief introduction is provided for the hardware subsystems of the robot, 
followed by instructions to setup a real-time Linux (Ubuntu with RT kernel)

Hardware setup
--------------

The connection between the motion bar, robot and the control box are
described in detail in the robot's user manual. Please refer to 
the manual for the initial setup of the robot. In order to connect 
the user's workstation PC to the robot, Flexiv RDK must be used.

.. figure:: /_static/system.png
   :width: 100.0%
   :align: center
   :figclass: align-center 

.. note::
   Teach pendant is not required for using Flexiv RDK.

.. important::
   The robot must be securely mounted to the base and will not topple over even during fast motions.


System requirements
---------------------------

This section specifies the workstation PC's requirements for running Flexiv's RDK.

+-----------------------------------------------------------------------------------+
| Minimum Operating System Requirements                                             |
+----------------------+------------------------------------------------------------+
| Operating system     | Linux Ubuntu 18.04 or 20.04 with PREEMPT_RT patched kernel |
+----------------------+------------------------------------------------------------+
| Network card         | At least 100BASE-TX with Cat-5 cables                      |
+----------------------+------------------------------------------------------------+

.. .. important::
..   In streaming mode, the robot sends data at 1 kHz frequency. Tt is important that the user computer is configured 
..   to minimize latencies. For example, we recommend to disable CPU frequency scaling. Other possible 
..   optimizations will depend on your particular system.   


Real-time kernel setup
--------------------------------

In order to control the robot using RDK, the controller program on the workstation PC must run as a *real-time process* under a 
real-time kernel. We suggest the *PREEMPT_RT* kernel for this purpose due to its balance between ease of use and real-time performance.

.. note::
   There has been reports on issues with Nvidia graphics card drivers when used with *PREEMPT_RT* kernel. Please refer to 
   Nvidia's support forums for installing a driver patch.

Install dependencies::

   sudo apt install -y git build-essential cmake ncurses-dev xz-utils libssl-dev bc flex libelf-dev bison curl gnupg2


A standard Ubuntu installation comes with a generic kernel, you can check the version of your kernel using ``uname -r``. 
It should appear as ``x.y.z`` where x, y and z are the major, minor and patch digits. In the following, we use Ubuntu 20.04 
machine with a ``5.11.4`` kernel as example.

Real-time kernel patches are only available for selected versions. Please visit `<https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/>`_ 
to make sure the kernel source named ``linux-5.11.4.tar.xz`` is available. Then visit `<https://mirrors.edge.kernel.org/pub/linux/kernel/projects/rt/>`_ 
to make sure the real-time patch corresponding to the kernel source you are going to use is also available. The version of 
the kernel source should be the same as the version indicated on the patch. For example, we need to make sure ``patch-5.11.4-rt11.patch.xz`` is 
available.

When decided which version to use, download both the source and patch files using::

   curl -LO https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/linux-5.11.4.tar.xz
   curl -LO https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/linux-5.11.4.tar.sign
   curl -LO https://mirrors.edge.kernel.org/pub/linux/kernel/projects/rt/5.11/patch-5.11.4-rt11.patch.xz
   curl -LO https://mirrors.edge.kernel.org/pub/linux/kernel/projects/rt/5.11/patch-5.11.4-rt11.patch.sign  

Unzip the xz packages::

   xz -dk linux-5.11.4.tar.xz
   xz -dk patch-5.11.4-rt11.patch.xz


(Optional) Verify downloaded files
------------------------------------

To verify the signature of kernel sources, run the following::

   gpg2 --locate-keys torvalds@kernel.org gregkh@kernel.org
   gpg2 --verify linux-5.11.4.tar.sign

To verify the patches, please visit `the Linux Foundation Wiki <https://wiki.linuxfoundation.org/realtime/preempt_rt_versions>`_  
to search for a key of the author, then run the following::

   gpg2 --verify patch-5.11.4-rt11.patch.sign


Compile and install real-time kernel
--------------------------------------
Before compiling the sources, we have to apply the patches::

   tar xf linux-5.11.4.tar
   cd linux-5.11.4
   patch -p1 < ../patch-5.11.4-rt11.patch

Next, we configure our kernel::

   make oldconfig

A series of questions will pop up, you can select the default option. When asked for the Preemption Model, choose the ``Fully Preemptible Kernel``::

   Preemption Model
   1. No Forced Preemption (Server) (PREEMPT_NONE)
   > 2. Voluntary Kernel Preemption (Desktop) (PREEMPT_VOLUNTARY)
   3. Preemptible Kernel (Low-Latency Desktop) (PREEMPT)
   4. Fully Preemptible Kernel (Real-Time) (PREEMPT_RT) (NEW)
   choice[1-4?]: 4

For all the other questions, press enter to select the default option. Note you can long-press enter to fast-forward all questions with the default option. 
When done, a file called ".config" will be generated. Before we can compile the kernel, open the ".config" file, find and set the following configuration parameters::

   CONFIG_SYSTEM_TRUSTED_KEYS = ""
   CONFIG_SYSTEM_REVOCATION_KEYS = ""
   
Now, we are ready to compile our new kernel::

   make -j `getconf _NPROCESSORS_ONLN` deb-pkg

After the build is finished check the debian packages::

   ls ../*deb
   
Then we install all compiled kernel debian packages::

   sudo dpkg -i ../*.deb


Set user privileges to use real-time scheduling
-------------------------------------------------

To be able to schedule threads with user privileges, we will need to change the user's limits by modifying ``/etc/security/limits.conf``. 
To do so, we create a group named *realtime* and add the user operating the robot to this group::

   sudo groupadd realtime
   sudo usermod -aG realtime $(whoami)

Next, make sure ``/etc/security/limits.conf`` contains the following::

   @realtime soft rtprio 99
   @realtime soft priority 99
   @realtime soft memlock 102400
   @realtime hard rtprio 99
   @realtime hard priority 99
   @realtime hard memlock 102400


Set GRUB to boot with real-time kernel
----------------------------------------

We will use grub-customizer to configure grub. To download and install, run::

   sudo add-apt-repository ppa:danielrichter2007/grub-customizer -y
   sudo apt update -y
   sudo apt install grub-customizer -y

Simply follow the instructions in this `It's FOSS tutorial <https://itsfoss.com/grub-customizer-ubuntu/>`_ to update your grub settings.

Now we can reboot the system and selected the ``PREEMPT_RT`` kernel. Once inside Ubuntu, we run ``uname -a`` on the terminal. If everything is done correctly, the terminal will 
show a string with the ``PREEMPT_RT`` keyword.


(Optional) Disable CPU speed scaling
------------------------------------

Modern CPUs are able to dynamically scale their frequency depending on operating conditions. In some cases, this can lead to uneven processing speed 
that in turn interrupts execution. These fluctuations in processing speed can affect the overall performance of the real-time processes.

To disable speed scaling, we will use ``cpufrequtils`` to disable power saving mode::

   sudo apt install cpufrequtils

Running ``cpufreq-info`` shows you the available cpufreq governors. The standard setting is ``performance, powersave``. 
We will switch all governers to ``performance``::

   sudo systemctl disable ondemand
   sudo systemctl enable cpufrequtils
   sudo sh -c 'echo "GOVERNOR=performance" > /etc/default/cpufrequtils'
   sudo systemctl daemon-reload && sudo systemctl restart cpufrequtils
