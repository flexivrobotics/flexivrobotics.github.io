Overview
==========

With Flexiv RDK, users will be able to connect their own workstation PC to the robot via Ethernet (TCP/IP) connection, 
and send real-time low-level commands to the robot. This enables the users to write powerful programs to operate the robot 
in real time. The states and commands data between the robot and the workstation PC are exchanged at a rate of 1kHz.

.. important::
   RDK gives you full access to the robot. This means that you *cannot* issue commands through the teach pendant. 
   Robot states, however, can still be read on the teach pendant.

Robot states
------------

The available real-time robot states feedback from the robot includes:

   * Measured joint-space states: joint position, velocity, and torque
   * Computed Cartesian-space states: TCP pose, velocity, and acceleration
   * Estimated states: joint external torque and external wrench on TCP
   * System status: emergency stop, digital IO, error message, etc
 
User commands
-------------

To control the robot, two types of user commands are accepted, in terms of update rate:
 
1. Real-time (RT) streaming commands at 1kHz update rate, including:

 * Gravity & friction compensated joint torques command
 * Joint positions command
 * Cartesian pose command

.. important::
   Since real-time data is streamed over the network at 1 kHz, a low-latency setup is required. Thus, a direct network connection (i.e. without switches/routers) 
   and a workstation PC with real-time kernel is highly recommended. The setup details are covered in the subsequent sections.

2. Non-real-time (NRT) commands, including: 
 
 * Plan execution command
 * Primitive execution command
 * Digital IO command for controlling external devices
 * Other auxiliary commands like enable, start, stop, auto-recovery, etc

The real-time commands can be calculated from user defined joint/Cartesian space motion generators, allowing users to easily 
integrate perception and other sensor modules to generate reactive motions. 

As for the non-real-time commands, instead of creating a custom motion generator, users can send plan, primitive, or relatively sparse Cartesian references to 
leverage the robot's internal motion generator to generate smooth trajectories. When using such non-real-time controls, since the waypoints are internally calculated, 
the requirements for network connection and user PC's performance can be relaxed.

.. RDK also provides users with the functions to issue commands to sequence manipulation primitives. 
.. These primitives allow highly complex motions to be executed both joint and Cartesian spaces.  
.. Developers can also include the robot to move to specific joint
.. configurations, move the end effector to specific poses, command specific torques, use primitives to control the robot and monitor and control digital I/O pins on the robot
.. control box. The Flexiv RDK is a fast and easy to use C++
.. module for interfacing with the robot via Ethernet.

.. Contents of the box
.. -------------------

.. What’s in the package:
  
..  * Robotic Manipulator

.. * Control Box

.. * Motion Bar

.. * Cable for Robot-Control Box connection 

.. What’s in the software package:

..  * RDK documentation with Quick Start Guide

..  * Flexiv RDK with examples

..  * Robot Model and URDF

.. .. figure:: /_static/robot_render.png
..   :alt: robotic manipulator
..   :width: 50.0%
..   :align: center

..   robotic manipulator

.. .. figure:: /_static/robotExploded.png
..   :alt: Exploded view of the robotic manipulator
..   :width: 60.0%
..   :align: center

..   Exploded view of the robotic manipulator

