Overview
==========

Flexiv RDK enables the users to connect their own workstation PC to the robot via Ethernet (TCP/IP) connection, 
and gain full control of the robot with the provided real-time and non-real-time APIs. Powerful user programs can 
be created for easy integration with external software or hardware modules, such as ROS, industrial control 
systems, additional sensors, vision and perception units, third-party libraries, etc.

OS and language support
-----------------------

Supported OS:

   * Ubuntu 20.04 (Linux)
   * Ubuntu 18.04 (Linux)

Supported programming language interfaces:

   * C++ (access to all APIs)
   * Python (access to non-real-time APIs only)

Real-time (RT) APIs
-----------------------

With real-time APIs, the robot states and user commands are exchanged between the workstation PC and the robot 
at 1kHz. Real-time commands, with the help of RDK's integrated RT scheduler, can be generated from user programs 
running on the workstation PC to gain low-level control of the robot. The available real-time controls are:

 * Joint torque control (w/ gravity and friction compensation)
 * Joint position control (w/ gravity, friction, and dynamics compensation)
 * Cartesian pose control (w/ gravity, friction, and dynamics compensation)

.. note::
   Real-time APIs can *only* be accessed via RDK's C++ interface. The Python interface does not have access. More 
   details will be provided in :doc:`rdk_library` chapter.

.. important::
   Since real-time data is streamed over the network at 1 kHz, a low-latency setup is required. Thus, a direct network 
   connection (i.e. without switches/routers) and a workstation PC with real-time kernel is highly recommended. More 
   details will be provided in the next :doc:`system_setup` chapter.


Non-real-time (NRT) APIs
-------------------------

With non-real-time APIs, the user can send high-level action instructions or discrete motion commands to leverage the 
robot's internal motion generator for smooth trajectories. Since the continuous trajectories are internally calculated 
by the robot, the requirements for network connection and workstation PC's performance can be relaxed. The available 
non-real-time controls are: 

 * Discrete joint position control (internal motion generator w/ all compensations)
 * Discrete Cartesian pose control (internal motion generator w/ all compensations)
 * Plan execution
 * Primitive execution
 * Digital IO control
 * Auxiliary instructions like enable, stop, auto-recovery, etc.

.. note::
   Non-real-time APIs can be accessed via both C++ interface and Python interface.


Feedback states
---------------

Regardless of the type of APIs (real-time or non-real-time) being used, the feedback states are always published from 
the robot server in real time at 1kHz. They include:

   * Measured joint-space states: joint position, velocity, and torque
   * Computed Cartesian-space states: TCP pose, velocity, and acceleration
   * Estimated states: external joint torque and external TCP wrench
   * System status: emergency stop, digital IO, error message, etc.

.. note::
   Although these states are published at 1kHz at all time, the actual frequency at which the states data is accessed 
   by the user depends the user's system and program setup.


.. important::
   RDK gives you full access to the robot. This means you *cannot* issue commands through the teach pendant while using 
   RDK. However, robot states will still be displayed on the teach pendant.

.. RDK also provides users with the functions to issue commands to sequence manipulation primitives. 
.. These primitives allow highly complex motions to be executed both joint and Cartesian spaces.  
.. Developers can also include the robot to move to specific joint
.. configurations, move the end effector to specific poses, command specific torques, use primitives to control the robot and monitor and control digital I/O pins on the robot
.. control box.

.. Contents of the box
.. -------------------

.. What’s in the package:
  
..  * Robotic Manipulator

.. * Control Box

.. * Motion Bar

.. * Cable for Robot-Control Box connection 

.. What’s in the software package:

..  * RDK documentation with Quick Start Guide

..  * Flexiv RDK with examples

..  * Robot Model and URDF

.. .. figure:: /_static/robot_render.png
..   :alt: robotic manipulator
..   :width: 50.0%
..   :align: center

..   robotic manipulator

.. .. figure:: /_static/robotExploded.png
..   :alt: Exploded view of the robotic manipulator
..   :width: 60.0%
..   :align: center

..   Exploded view of the robotic manipulator

